#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Definição da estrutura do arquivo de entrada
typedef struct  {
    
    int id;
    int idSolution;
    char solutionName[50];
    char solutionInitials[10];
    int idTeacher;
    char teacherName[50];
    int idDay;
    int idInstitution;
    int idUnit;
    char unitName[50];
    int idUnitCourse;
    int idCourse;
    char courseName[50];
    int idClass;
    char className[50];
    int idDiscipline;
    char disciplineName[50];
    int idRoom;
    char roomName[50];
    int studentsNumber;
    int sequence;
    int idBeginSlot;
    char beginTimeName[11];
    int idEndSlot;
    char endTimeName[11];
    int idYear;
    int idTerm;
    int idCollisionType;
    int collisionLevel;
    int collisionSize;

} DadosEntrada;

typedef struct Node {
    int id;
    int level;
    struct Node* children;
    int numChildren;
} Node;

Node* createNode(int id, int level) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->id = id;
    newNode->level = level;
    newNode->children = NULL;
    newNode->numChildren = 0;
    return newNode;
}

void addChild(Node* parent, int id, int level) {
    parent->numChildren++;
    parent->children = (Node*)realloc(parent->children, parent->numChildren * sizeof(Node));
    parent->children[parent->numChildren - 1] = *createNode(id, level);
}


Node* findChild(Node* parent, int id) {
    for (int i = 0; i < parent->numChildren; i++) {
        if (parent->children[i].id == id) {
            return &(parent->children[i]);
        }
    }
    return NULL;
}

Node* leituraArquivo(char* nomearquivo) {
    FILE* arquivo = fopen(nomearquivo, "r");
    DadosEntrada dados;
    Node* root = NULL;

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo. Tente novamente.");
        return NULL;
    }

    while (fscanf(arquivo, "%d, %d, %[^,], %[^,], %d, %[^,], %d, %d, %d, %[^,], %d, %d, %[^,], %d, %[^,], %d, %[^,], %d, %[^,], %d, %d, %d, %[^,], %d, %[^,], %d, %d, %d, %d, %d\n",
           &dados.id, &dados.idSolution, dados.solutionName, dados.solutionInitials, &dados.idTeacher,
           dados.teacherName, &dados.idDay, &dados.idInstitution, &dados.idUnit, dados.unitName,
           &dados.idUnitCourse, &dados.idCourse, dados.courseName, &dados.idClass, dados.className,
           &dados.idDiscipline, dados.disciplineName, &dados.idRoom, dados.roomName, &dados.studentsNumber,
           &dados.sequence, &dados.idBeginSlot, dados.beginTimeName, &dados.idEndSlot, dados.endTimeName,
           &dados.idYear, &dados.idTerm, &dados.idCollisionType, &dados.collisionLevel, &dados.collisionSize) != EOF) {

        printf("%d, %d, %s, %s, %d, %s, %d, %d, %d, %s, %d, %d, %s, %d, %s, %d, %s, %d, %s, %d, %d, %d, %s, %d, %s, %d, %d, %d, %d, %d\n",
            dados.id, dados.idSolution, dados.solutionName, dados.solutionInitials, dados.idTeacher,
            dados.teacherName, dados.idDay, dados.idInstitution, dados.idUnit, dados.unitName,
            dados.idUnitCourse, dados.idCourse, dados.courseName, dados.idClass, dados.className,
            dados.idDiscipline, dados.disciplineName, dados.idRoom, dados.roomName, dados.studentsNumber,
            dados.sequence, dados.idBeginSlot, dados.beginTimeName, dados.idEndSlot, dados.endTimeName,
            dados.idYear, dados.idTerm, dados.idCollisionType, dados.collisionLevel, dados.collisionSize);

        if (root == NULL) {
            root = createNode(-1, 0); // Nível da raiz é 0
        }

        Node* institutionNode = findChild(root, dados.idInstitution);
        if (institutionNode == NULL) {
            addChild(root, dados.idInstitution, 1); // Nível da instituição é 1
            institutionNode = &(root->children[root->numChildren - 1]);
        }

        Node* unitNode = findChild(institutionNode, dados.idUnit);
        if (unitNode == NULL) {
            addChild(institutionNode, dados.idUnit, 2); // Nível da unidade é 2
            unitNode = &(institutionNode->children[institutionNode->numChildren - 1]);
        }

        Node* courseNode = findChild(unitNode, dados.idCourse);
        if (courseNode == NULL) {
            addChild(unitNode, dados.idCourse, 3); // Nível do curso é 3
            courseNode = &(unitNode->children[unitNode->numChildren - 1]);
        }

        Node* classNode = findChild(courseNode, dados.idClass);
        if (classNode == NULL) {
            addChild(courseNode, dados.idClass, 4); // Nível da turma é 4
            classNode = &(courseNode->children[courseNode->numChildren - 1]);
        }

        Node* disciplineNode = findChild(classNode, dados.idDiscipline);
        if (disciplineNode == NULL) {
            addChild(classNode, dados.idDiscipline, 5); // Nível da disciplina é 5
            disciplineNode = &(classNode->children[classNode->numChildren - 1]);
        }

        Node* dayNode = findChild(disciplineNode, dados.idDay);
        if(dayNode == NULL){
            addChild(disciplineNode, dados.idDay, 6); //Nível do dia é 6
            dayNode = &(disciplineNode->children[disciplineNode->numChildren - 1]);
        }

        Node* beginTimeNode = findChild(dayNode, dados.idBeginSlot);
        if(beginTimeNode == NULL){
            addChild(dayNode, dados.idBeginSlot, 7); // Nível do horário inicial é 7
            beginTimeNode = &(dayNode->children[dayNode->numChildren - 1]);
        }

        Node* endTimeNode = findChild(beginTimeNode, dados.idEndSlot);
        if(endTimeNode == NULL){
            addChild(beginTimeNode, dados.idEndSlot, 8); //Nível do horário final é 8
            endTimeNode = &(beginTimeNode->children[beginTimeNode->numChildren - 1]);
        }

        Node* idTeacherNode = findChild(endTimeNode, dados.idTeacher);
        if(idTeacherNode == NULL){
            addChild(endTimeNode, dados.idTeacher, 9); //Nível do professor é 9
            idTeacherNode = &(endTimeNode->children[endTimeNode->numChildren - 1]);
        }

        Node* roomNode = findChild(idTeacherNode, dados.idRoom);
        if (roomNode == NULL) {
            addChild(idTeacherNode, dados.idRoom, 10);  //Nível da sala é 10
            roomNode = &(idTeacherNode->children[idTeacherNode->numChildren - 1]);
        }

        Node* idLine = findChild(roomNode, dados.id);
        if (idLine == NULL){
            addChild(roomNode, dados.id, 11); // Nivel do id único da linha é 11
            idLine = &(roomNode->children[roomNode->numChildren - 1]);
        }
    }

    fclose(arquivo);
    return root;
}

void printTree(Node* node, int level) {
    for (int i = 0; i < level; i++) {
        printf("  ");
    }
    printf("id: %d\n", node->id);
    for (int i = 0; i < node->numChildren; i++) {
        printTree(&node->children[i], level + 1);
    }
}

int main() {

    char nomeArquivo [100];
    printf("Digite o caminho do arquivo a ser lido: ");
    scanf("%s", nomeArquivo);

    printf("\n-------------------------\n");
    printf("Iniciando leitura...");
    printf("\n-------------------------\n");
    Node* root = leituraArquivo(nomeArquivo);

    if(root != NULL){
        printf("\n-----------------------\n");
        printf("\nÁrvore n-ária impressa:\n");
        printf("\n-----------------------\n");
        printTree(root, 0);

    }

    printf("\n-------------------------\n");
    printf("FIM!");
    printf("\n-------------------------\n");

    return 0;
}

