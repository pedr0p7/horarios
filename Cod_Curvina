#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>


// Definição da estrutura do arquivo de entrada

typedef struct  {
    
    int id;
    int idSolution;
    char solutionName[50];
    char solutionInitials[10];
    int idTeacher;
    char teacherName[50];
    int idDay;
    int idInstitution;
    int idUnit;
    char unitName[50];
    int idUnitCourse;
    int idCourse;
    char courseName[50];
    int idClass;
    char className[50];
    int idDiscipline;
    char disciplineName[50];
    int idRoom;
    char roomName[50];
    int studentsNumber;
    int sequence;
    int idBeginSlot;
    char beginTimeName[11];
    int idEndSlot;
    char endTimeName[11];
    int idYear;
    int idTerm;
    int idCollisionType;
    int collisionLevel;
    int collisionSize;

} DadosEntrada;

typedef struct Node{
    int id;
    struct Node* filho;
    struct Node* irmao;
} Node;

Node* createNode(int id){
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->id = id;
    newNode->filho = NULL;
    newNode->irmao = NULL;

    return newNode;
}

void addFilho(Node* pai, Node* filho){

    if(pai->filho == NULL){
        pai->filho = filho;
    } 
        else{

            Node* ultimoIrmao = pai->filho;
            while (ultimoIrmao->irmao != NULL) {
                ultimoIrmao = ultimoIrmao->irmao;
            }
 
        ultimoIrmao->irmao = filho;
    }

}



Node* leituraArquivo (char* nomearquivo){

    FILE *arquivo = fopen(nomearquivo, "r");
    DadosEntrada dados;
    Node* root = NULL;

    if(arquivo == NULL){

        printf("Erro ao abrir o arquivo. Tente novamente.");
        return NULL;
    }
                    //     1   2     3     4     5    6     7   8   9    10   11   12   13    14   15    16   17    18   19   20   21  22   23    24   25    26  27  28  29  30
    while(fscanf(arquivo, "%d, %d, %[^,], %[^,], %d, %[^,], %d, %d, %d, %[^,], %d, %d, %[^,], %d, %[^,], %d, %[^,], %d, %[^,], %d, %d, %d, %[^,], %d, %[^,], %d, %d, %d, %d, %d\n",
           &dados.id, &dados.idSolution, dados.solutionName, dados.solutionInitials, &dados.idTeacher,
           dados.teacherName, &dados.idDay, &dados.idInstitution, &dados.idUnit, dados.unitName,
           &dados.idUnitCourse, &dados.idCourse, dados.courseName, &dados.idClass, dados.className,
           &dados.idDiscipline, dados.disciplineName, &dados.idRoom, dados.roomName, &dados.studentsNumber,
           &dados.sequence, &dados.idBeginSlot, dados.beginTimeName, &dados.idEndSlot, dados.endTimeName,
           &dados.idYear, &dados.idTerm, &dados.idCollisionType, &dados.collisionLevel, &dados.collisionSize) != EOF){

            printf("%d, %d, %s, %s, %d, %s, %d, %d, %d, %s, %d, %d, %s, %d, %s, %d, %s, %d, %s, %d, %d, %d, %s, %d, %s, %d, %d, %d, %d, %d\n",
            dados.id, dados.idSolution, dados.solutionName, dados.solutionInitials, dados.idTeacher,
            dados.teacherName, dados.idDay, dados.idInstitution, dados.idUnit, dados.unitName,
            dados.idUnitCourse, dados.idCourse, dados.courseName, dados.idClass, dados.className,
            dados.idDiscipline, dados.disciplineName, dados.idRoom, dados.roomName, dados.studentsNumber,
            dados.sequence, dados.idBeginSlot, dados.beginTimeName, dados.idEndSlot, dados.endTimeName,
            dados.idYear, dados.idTerm, dados.idCollisionType, dados.collisionLevel, dados.collisionSize);
            
            if(root == NULL){
                root = createNode(-1);
            }

            Node* idInstitutionNode = NULL;

            // Verificar se o nó  já existe
            if (root != NULL) {
                idInstitutionNode = root->filho;
                while (idInstitutionNode != NULL) {
                    if (idInstitutionNode->id == dados.idInstitution) {
                        break;  // O nó já existe, sair do loop
                    }
                    idInstitutionNode = idInstitutionNode->irmao;
                }
            }

            // Se o nó  ainda não existe, criar e adicionar à árvore
            if (idInstitutionNode == NULL) {
                idInstitutionNode = createNode(dados.idInstitution);
                addFilho(root, idInstitutionNode);
            }

            // Repetir o padrão para os outros nós
            Node* idUnitNode = NULL;
            if (idInstitutionNode != NULL) {
                idUnitNode = idInstitutionNode->filho;
                while (idUnitNode != NULL) {
                    if (idUnitNode->id == dados.idUnit) {
                        break;  
                    }
                    idUnitNode = idUnitNode->irmao;
                }
            }

            if (idUnitNode == NULL) {
                idUnitNode = createNode(dados.idUnit);
                addFilho(idInstitutionNode, idUnitNode);
            }

            Node* idCourseNode = NULL;
            if (idUnitNode != NULL) {
                idCourseNode = idUnitNode->filho;
                while (idCourseNode != NULL) {
                    if (idCourseNode->id == dados.idCourse) {
                        break;  
                    }
                    idCourseNode = idCourseNode->irmao;
                }
            }

            if (idCourseNode == NULL) {
                idCourseNode = createNode(dados.idCourse);
                addFilho(idUnitNode, idCourseNode);
            }

            Node* idClassNode = NULL;
            if (idCourseNode != NULL) {
                idClassNode = idCourseNode->filho;
                while (idClassNode != NULL) {
                    if (idClassNode->id == dados.idClass) {
                        break;  
                    }
                    idClassNode = idClassNode->irmao;
                }
            }

            if (idClassNode == NULL) {
                idClassNode = createNode(dados.idClass);
                addFilho(idCourseNode, idClassNode);
            }

            Node* idDisciplineNode = NULL;
            if (idClassNode != NULL) {
                idDisciplineNode = idClassNode->filho;
                while (idDisciplineNode != NULL) {
                    if (idDisciplineNode->id == dados.idDiscipline) {
                        break;  
                    }
                    idDisciplineNode = idDisciplineNode->irmao;
                }
            }

            if (idDisciplineNode == NULL) {
                idDisciplineNode = createNode(dados.idDiscipline);
                addFilho(idClassNode, idDisciplineNode);
            }

            Node* idRoomNode = createNode(dados.idRoom);
            addFilho(idDisciplineNode, idRoomNode);

            Node* idBeginSlotNode = createNode(dados.idBeginSlot);
            addFilho(idRoomNode, idBeginSlotNode);

            Node* idEndSlotNode = createNode(dados.idEndSlot);
            addFilho(idBeginSlotNode, idEndSlotNode);

            Node* idTeacherNode = createNode(dados.idTeacher);
            addFilho(idEndSlotNode, idTeacherNode);
            

        }

    printf("\n-------------------------");
    printf("Arquivo lido com sucesso!");
    printf("-------------------------\n");

    fclose(arquivo);

    return root;
}


void imprimirArvoreAux(Node* no, int nivel) {
    if (no == NULL) {
        return;
    }

    for (int i = 0; i < nivel; i++) {
        printf("  "); // Duas espaços por nível de indentação
    }
    printf("%d\n", no->id);

    Node* filho = no->filho;
    while (filho != NULL) {
        imprimirArvoreAux(filho, nivel + 1);
        filho = filho->irmao;
    }
}

void imprimirArvore(Node* raiz) {
    imprimirArvoreAux(raiz, 0);
}


int main(){

    char nomeArquivo [100];
    printf("Digite o caminho do arquivo a ser lido: ");
    scanf("%s", nomeArquivo);

    printf("\n-------------------------\n");
    printf("Iniciando leitura...");
    printf("\n-------------------------\n");
    Node* root = leituraArquivo(nomeArquivo);

    if(root != NULL){
        printf("\n-----------------------\n");
        printf("\nÁrvore n-ária impressa:\n");
        printf("\n-----------------------\n");
        imprimirArvore(root);
    }

    printf("\n-------------------------\n");
    printf("FIM!");
    printf("\n-------------------------\n");

}
