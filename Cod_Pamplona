void printCollisions(Node* node, FILE* saidaArquivo) {
    if (node == NULL) {
        return;
    }

    if (node->level == 5 && node->data != NULL) {
        DadosEntrada* dados = node->data;
        fprintf(saidaArquivo, "Colisão encontrada:\n");
        fprintf(saidaArquivo, "Professor: %s\n", dados->teacherName);
        fprintf(saidaArquivo, "Disciplina: %s\n", dados->disciplineName);
        fprintf(saidaArquivo, "Sala de aula: %s\n", dados->roomName);
        fprintf(saidaArquivo, "Horário: %s - %s\n", dados->beginTimeName, dados->endTimeName);
        fprintf(saidaArquivo, "-----------------------\n");
    }

    for (int i = 0; i < node->numChildren; i++) {
        printCollisions(node->children[i], saidaArquivo);
    }
}

int main() {
    char nomeArquivo[100];
    printf("Digite o caminho do arquivo a ser lido: ");
    scanf("%s", nomeArquivo);

    FILE* arquivo = fopen(nomeArquivo, "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo. Tente novamente.\n");
        return 1;
    }

    printf("-------------------------\n");
    printf("Iniciando leitura...\n");
    printf("-------------------------\n");
    Node* root = leituraArquivo(nomeArquivo);

    if (root != NULL) {
        printf("-----------------------\n");
        printf("Colisões:\n");
        printf("-----------------------\n");

        FILE* saidaArquivo = fopen("saida.txt", "w"); // Abre o arquivo de saída
        printCollisions(root, saidaArquivo);
        fclose(saidaArquivo); // Fecha o arquivo de saída
    }

    printf("-------------------------\n");
    printf("FIM!\n");
    printf("-------------------------\n");

    fclose(arquivo);
    return 0;
}
